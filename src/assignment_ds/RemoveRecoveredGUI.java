/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package assignment_ds;

/**
 *
 * @author liksh
 */
import static assignment_ds.InjuryReserveGUI.injuryReserve;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.DriverManager;
import javax.swing.JFrame;


public class RemoveRecoveredGUI extends javax.swing.JFrame {

    private DatabaseConnection dbConnection;
    private DefaultTableModel model;
    String url = "jdbc:mysql://localhost:3307/nba";
    String username = "root";
    String password = "";
    
    /**
     * Creates new form RemoveInjuredGUI
     */
    public RemoveRecoveredGUI() {
        initComponents();
        // Initialize the database connection
        String url = "jdbc:mysql://localhost:3307/nba"; // Update with your database URL
        String user = "root"; // Update with your database username
        String password = ""; // Update with your database password
        dbConnection = new DatabaseConnection(url, user, password);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        BackButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        PlayerName = new javax.swing.JTextField();
        RemoveRecoveredButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));

        BackButton.setBackground(new java.awt.Color(204, 0, 0));
        BackButton.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        BackButton.setForeground(new java.awt.Color(255, 255, 255));
        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Remove Recovered Player");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 542, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 8, Short.MAX_VALUE)
        );

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Player Name:");

        PlayerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayerNameActionPerformed(evt);
            }
        });

        RemoveRecoveredButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        RemoveRecoveredButton.setForeground(new java.awt.Color(0, 0, 0));
        RemoveRecoveredButton.setText("Remove");
        RemoveRecoveredButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveRecoveredButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(BackButton)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PlayerName, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)))
                .addGap(0, 83, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(256, 256, 256)
                .addComponent(RemoveRecoveredButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BackButton)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(55, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PlayerName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(35, 35, 35)
                .addComponent(RemoveRecoveredButton)
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        this.dispose();
        InjuryReserveGUI gui = new InjuryReserveGUI();
        gui.setLocationRelativeTo(null);
        gui.setVisible(true);
    }//GEN-LAST:event_BackButtonActionPerformed

    private void PlayerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayerNameActionPerformed

    }//GEN-LAST:event_PlayerNameActionPerformed

    private void RemoveRecoveredButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveRecoveredButtonActionPerformed
        String playerName = PlayerName.getText().trim();
        
        // Check if playerName  is null or empty
        if (playerName == null || playerName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter player name", "Player Name is MISSING", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        String addMesj = "Player: " + playerName + "\nStatus: Cleared to Play";
        boolean playerExists = checkPlayerInInjuryReserve(playerName);
        if (playerExists) {
            //found - remove from roster - add list
            if (transferPlayerBackToRoster(playerName)) {
                JOptionPane.showMessageDialog(this, "Player exists in the injury reserve.", "Player Found", JOptionPane.INFORMATION_MESSAGE);
                JOptionPane.showMessageDialog(this, addMesj, "Removing Player from Injury Reserve", JOptionPane.INFORMATION_MESSAGE);
                InjuryReserveGUI.injuryReserve.removeRecovered(playerName);
                System.out.println("Updated: \n"+injuryReserve.toString());
                PlayerName.setText("");
            } else {
                PlayerName.setText("");
                JOptionPane.showMessageDialog(this, "Error transferring player data from injury reserve back to active roster.", "Database Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            //not found
            PlayerName.setText("");
            JOptionPane.showMessageDialog(this, "Player does not exist in the injury reserve.", "Player Not Found", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_RemoveRecoveredButtonActionPerformed

        private void connectToDatabase() {
            dbConnection = new DatabaseConnection("jdbc:mysql://localhost:3307/nba", "root", "");
        }

        private boolean checkPlayerInInjuryReserve(String playerName) {
        boolean playerFound = false;

        String query = "SELECT * FROM injuryreserve WHERE Name = ?";

        try (Connection conn = dbConnection.getConnection();
             PreparedStatement statement = conn.prepareStatement(query)) {

            // Set the parameter (playerName) in the query
            statement.setString(1, playerName);

            // Execute the query
            try (ResultSet resultSet = statement.executeQuery()) {
                // If there is at least one row returned, the player is found in the roster
                if (resultSet.next()) {
                    playerFound = true;
                }
            }
        } catch (SQLException e) {
            // Handle any SQL exceptions
            e.printStackTrace();
        }

        return playerFound;
    }

    
    // Method to transfer player data from injuryreserve to assignment2
    private boolean transferPlayerBackToRoster(String playerName) {
        String url = "jdbc:mysql://localhost:3307/nba"; // Update with your database URL
        String user = "root"; // Update with your database username
        String password = ""; // Update with your database password
        boolean success = true;

        String selectQuery = "SELECT * FROM injuryreserve WHERE Name = ?";
        String insertQuery = "INSERT INTO assignment2 (Name, Age, Position, Salary, Height, Weight, Points, Rebounds, Steals, Assists, Blocks, `Contract duration`, `Composite Mark`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        String deleteQuery = "DELETE FROM injuryreserve WHERE Name = ?";
        
        try (Connection conn = DriverManager.getConnection(url, user, password); 
                PreparedStatement selectStmt = conn.prepareStatement(selectQuery); 
                PreparedStatement insertStmt = conn.prepareStatement(insertQuery);
                PreparedStatement deleteStmt = conn.prepareStatement(deleteQuery)) {

            selectStmt.setString(1, playerName);
            ResultSet rs = selectStmt.executeQuery();

            if (rs.next()) {
                insertStmt.setString(1, rs.getString("Name"));
                insertStmt.setInt(2, rs.getInt("Age"));
                insertStmt.setString(3, rs.getString("Position"));
                insertStmt.setDouble(4, rs.getDouble("Salary"));
                insertStmt.setDouble(5, rs.getDouble("Height"));
                insertStmt.setDouble(6, rs.getDouble("Weight"));
                insertStmt.setDouble(7, rs.getDouble("Points"));
                insertStmt.setDouble(8, rs.getDouble("Rebounds"));
                insertStmt.setDouble(9, rs.getDouble("Steals"));
                insertStmt.setDouble(10, rs.getDouble("Assists"));
                insertStmt.setDouble(11, rs.getDouble("Blocks"));
                insertStmt.setInt(12, rs.getInt("Contract duration"));
                insertStmt.setDouble(13, rs.getDouble("Composite Mark"));

                insertStmt.executeUpdate();
                
                // Now delete the player from assignment2 table
                deleteStmt.setString(1, playerName);
                deleteStmt.executeUpdate();
                
            } else {
                JOptionPane.showMessageDialog(this, "Player data not found in injuryreserve table.", "Error", JOptionPane.ERROR_MESSAGE);
                success=false;
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error transferring player data: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            success=false;
        }
        
        return success;
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RemoveRecoveredGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RemoveRecoveredGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RemoveRecoveredGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RemoveRecoveredGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RemoveRecoveredGUI removeRecoveredGUI = new RemoveRecoveredGUI();
                removeRecoveredGUI.setVisible(true);
                removeRecoveredGUI.setLocationRelativeTo(null);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JTextField PlayerName;
    private javax.swing.JButton RemoveRecoveredButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
